const path = require('path'),
    fs = require('fs'),
    HtmlWebpackPlugin = require('html-webpack-plugin'),
    { CleanWebpackPlugin } = require('clean-webpack-plugin');


    const PATHS = {
        src: path.join(__dirname, './src'),
        dist: path.join(__dirname, './dist'),
        assets: 'assets/',
        static: 'static',
    };
    
    const PAGES_DIR = `${PATHS.src}/pages/`;
    const folders = fs.readdirSync(PAGES_DIR)
    const PAGE = [];
    const Pages = [];
    folders.forEach((folder) => {
        Pages.push(`${PATHS.src}/pages/${folder}`)
    })
        
    for (let page of Pages) {
        const p = fs.readdirSync(page).filter(fileName => { 
            return fileName.endsWith('.pug')
        }).join('');
        PAGE.push(p);
    }

module.exports = {
    entry: {
        main: path.resolve(__dirname, './src/index.js'),
    },

    output: {
        path: path.resolve(__dirname, './dist'),
        filename: '[name].bundle.js',
        publicPath: '',
    },

    plugins: [
       /* new HtmlWebpackPlugin({
            template: path.resolve(__dirname, './src/template.html'),
            filename: 'index.html',
        }),*/

        ...PAGE.map((page, i) =>
        new HtmlWebpackPlugin({
            template: `${Pages[i]}/${page}`,
            filename: `./${page.replace(/\.pug/, '.html')}`,
            inject: true,
        })
    ),

        new CleanWebpackPlugin(),
    ],

    module: {
        rules: [
            {
                test: /\.js$/,
                exclude: /node_modules/,
                use: ['babel-loader'],
            },

            {
                test: /\.(?:ico|gif|png|jpg|jpeg|webp|svg)$/i,
                type: 'asset/resource',
                generator: {
                    filename: 'img/[name][ext]'
                },
            },

            {
                test: /\.(woff(2)?|eot|ttf|otf|)$/,
                //type: 'asset/resource',
                type: 'asset/inline',
            },

            {
                test: /\.(scss|css)$/,
                use: ['style-loader', {
                    loader: 'css-loader',
                    options: { sourceMap: true, importLoaders: 1 }
                  },
                  { loader: 'postcss-loader', options: { sourceMap: true } },
                  { loader: 'sass-loader', options: { sourceMap: true } }],
            },

            {
                test: /\.pug$/,
                use: ['pug-loader'],
            },
        ],
    }
}